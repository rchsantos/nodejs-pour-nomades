{"version":3,"sources":["nodde-client/tests/answer/answer-question/component.jscs-test.js","nodde-client/tests/answer/answer-question/component.jshint.js","nodde-client/tests/answer/controller.jscs-test.js","nodde-client/tests/answer/controller.jshint.js","nodde-client/tests/answer/route.jscs-test.js","nodde-client/tests/answer/route.jshint.js","nodde-client/tests/app.jscs-test.js","nodde-client/tests/app.jshint.js","nodde-client/tests/application/adapter.jscs-test.js","nodde-client/tests/application/adapter.jshint.js","nodde-client/tests/application/route.jscs-test.js","nodde-client/tests/application/route.jshint.js","nodde-client/tests/components/default-toolbar/component.jscs-test.js","nodde-client/tests/components/default-toolbar/component.jshint.js","nodde-client/tests/components/line-edit/component.jscs-test.js","nodde-client/tests/components/line-edit/component.jshint.js","nodde-client/tests/helpers/destroy-app.js","nodde-client/tests/helpers/destroy-app.jscs-test.js","nodde-client/tests/helpers/destroy-app.jshint.js","nodde-client/tests/helpers/ember-simple-auth.js","nodde-client/tests/helpers/ember-sortable/test-helpers.js","nodde-client/tests/helpers/module-for-acceptance.js","nodde-client/tests/helpers/module-for-acceptance.jscs-test.js","nodde-client/tests/helpers/module-for-acceptance.jshint.js","nodde-client/tests/helpers/resolver.js","nodde-client/tests/helpers/resolver.jscs-test.js","nodde-client/tests/helpers/resolver.jshint.js","nodde-client/tests/helpers/start-app.js","nodde-client/tests/helpers/start-app.jscs-test.js","nodde-client/tests/helpers/start-app.jshint.js","nodde-client/tests/integration/components/answer-question/component-test.js","nodde-client/tests/integration/components/answer-question/component-test.jscs-test.js","nodde-client/tests/integration/components/answer-question/component-test.jshint.js","nodde-client/tests/integration/components/default-toolbar/component-test.js","nodde-client/tests/integration/components/default-toolbar/component-test.jscs-test.js","nodde-client/tests/integration/components/default-toolbar/component-test.jshint.js","nodde-client/tests/integration/components/line-edit/component-test.js","nodde-client/tests/integration/components/line-edit/component-test.jscs-test.js","nodde-client/tests/integration/components/line-edit/component-test.jshint.js","nodde-client/tests/integration/components/pool-in-list/component-test.js","nodde-client/tests/integration/components/pool-in-list/component-test.jscs-test.js","nodde-client/tests/integration/components/pool-in-list/component-test.jshint.js","nodde-client/tests/login/controller.jscs-test.js","nodde-client/tests/login/controller.jshint.js","nodde-client/tests/login/route.jscs-test.js","nodde-client/tests/login/route.jshint.js","nodde-client/tests/models/pool.jscs-test.js","nodde-client/tests/models/pool.jshint.js","nodde-client/tests/models/user.jscs-test.js","nodde-client/tests/models/user.jshint.js","nodde-client/tests/new-pool/controller.jscs-test.js","nodde-client/tests/new-pool/controller.jshint.js","nodde-client/tests/new-pool/route.jscs-test.js","nodde-client/tests/new-pool/route.jshint.js","nodde-client/tests/resolver.jscs-test.js","nodde-client/tests/resolver.jshint.js","nodde-client/tests/results/route.jscs-test.js","nodde-client/tests/results/route.jshint.js","nodde-client/tests/router.jscs-test.js","nodde-client/tests/router.jshint.js","nodde-client/tests/services/current-user.jscs-test.js","nodde-client/tests/services/current-user.jshint.js","nodde-client/tests/sign-up/controller.jscs-test.js","nodde-client/tests/sign-up/controller.jshint.js","nodde-client/tests/sign-up/route.jscs-test.js","nodde-client/tests/sign-up/route.jshint.js","nodde-client/tests/test-helper.js","nodde-client/tests/test-helper.jscs-test.js","nodde-client/tests/test-helper.jshint.js","nodde-client/tests/unit/answer/controller-test.js","nodde-client/tests/unit/answer/controller-test.jscs-test.js","nodde-client/tests/unit/answer/controller-test.jshint.js","nodde-client/tests/unit/answer/route-test.js","nodde-client/tests/unit/answer/route-test.jscs-test.js","nodde-client/tests/unit/answer/route-test.jshint.js","nodde-client/tests/unit/application/adapter-test.js","nodde-client/tests/unit/application/adapter-test.jscs-test.js","nodde-client/tests/unit/application/adapter-test.jshint.js","nodde-client/tests/unit/login/controller-test.js","nodde-client/tests/unit/login/controller-test.jscs-test.js","nodde-client/tests/unit/login/controller-test.jshint.js","nodde-client/tests/unit/login/route-test.js","nodde-client/tests/unit/login/route-test.jscs-test.js","nodde-client/tests/unit/login/route-test.jshint.js","nodde-client/tests/unit/models/pool-test.js","nodde-client/tests/unit/models/pool-test.jscs-test.js","nodde-client/tests/unit/models/pool-test.jshint.js","nodde-client/tests/unit/models/user-test.js","nodde-client/tests/unit/models/user-test.jscs-test.js","nodde-client/tests/unit/models/user-test.jshint.js","nodde-client/tests/unit/new-pool/controller-test.js","nodde-client/tests/unit/new-pool/controller-test.jscs-test.js","nodde-client/tests/unit/new-pool/controller-test.jshint.js","nodde-client/tests/unit/new-pool/route-test.js","nodde-client/tests/unit/new-pool/route-test.jscs-test.js","nodde-client/tests/unit/new-pool/route-test.jshint.js","nodde-client/tests/unit/results/route-test.js","nodde-client/tests/unit/results/route-test.jscs-test.js","nodde-client/tests/unit/results/route-test.jshint.js","nodde-client/tests/unit/services/current-user-test.js","nodde-client/tests/unit/services/current-user-test.jscs-test.js","nodde-client/tests/unit/services/current-user-test.jshint.js","nodde-client/tests/unit/sign-up/controller-test.js","nodde-client/tests/unit/sign-up/controller-test.jscs-test.js","nodde-client/tests/unit/sign-up/controller-test.jshint.js","nodde-client/tests/unit/sign-up/route-test.js","nodde-client/tests/unit/sign-up/route-test.jscs-test.js","nodde-client/tests/unit/sign-up/route-test.jshint.js","nodde-client/tests/unit/welcome/controller-test.js","nodde-client/tests/unit/welcome/controller-test.jscs-test.js","nodde-client/tests/unit/welcome/controller-test.jshint.js","nodde-client/tests/unit/welcome/route-test.js","nodde-client/tests/unit/welcome/route-test.jscs-test.js","nodde-client/tests/unit/welcome/route-test.jshint.js","nodde-client/tests/welcome/controller.jscs-test.js","nodde-client/tests/welcome/controller.jshint.js","nodde-client/tests/welcome/pool-in-list/component.jscs-test.js","nodde-client/tests/welcome/pool-in-list/component.jshint.js","nodde-client/tests/welcome/route.jscs-test.js","nodde-client/tests/welcome/route.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('nodde-client/tests/answer/answer-question/component.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - answer/answer-question');\n  test('answer/answer-question/component.js should pass jscs', function () {\n    ok(true, 'answer/answer-question/component.js should pass jscs.');\n  });\n});","define('nodde-client/tests/answer/answer-question/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - answer/answer-question');\n  QUnit.test('answer/answer-question/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'answer/answer-question/component.js should pass jshint.');\n  });\n});","define('nodde-client/tests/answer/controller.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - answer');\n  test('answer/controller.js should pass jscs', function () {\n    ok(true, 'answer/controller.js should pass jscs.');\n  });\n});","define('nodde-client/tests/answer/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - answer');\n  QUnit.test('answer/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'answer/controller.js should pass jshint.');\n  });\n});","define('nodde-client/tests/answer/route.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - answer');\n  test('answer/route.js should pass jscs', function () {\n    ok(false, 'answer/route.js should pass jscs.\\ndisallowMultipleLineBreaks: ; and export should have at most 2 line(s) between them at answer/route.js :\\n     1 |import Ember from \\'ember\\';\\n     2 |import AuthenticatedRouteMixin from \\'ember-simple-auth/mixins/authenticated-route-mixin\\';\\n-------------------------------------------------------------------------------------------------^\\n     3 |\\n     4 |\\nrequireCamelCaseOrUpperCaseIdentifiers: All identifiers must be camelCase or UPPER_CASE at answer/route.js :\\n     5 |export default Ember.Route.extend(AuthenticatedRouteMixin , {\\n     6 |  model(params) {\\n     7 |    return this.store.find(\\'pool\\', params.pool_id);\\n--------------------------------------------------^\\n     8 |  }\\n     9 |});');\n  });\n});","define('nodde-client/tests/answer/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - answer');\n  QUnit.test('answer/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'answer/route.js should pass jshint.');\n  });\n});","define('nodde-client/tests/app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('app.js should pass jscs', function () {\n    ok(true, 'app.js should pass jscs.');\n  });\n});","define('nodde-client/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('nodde-client/tests/application/adapter.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - application');\n  test('application/adapter.js should pass jscs', function () {\n    ok(true, 'application/adapter.js should pass jscs.');\n  });\n});","define('nodde-client/tests/application/adapter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - application');\n  QUnit.test('application/adapter.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/adapter.js should pass jshint.');\n  });\n});","define('nodde-client/tests/application/route.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - application');\n  test('application/route.js should pass jscs', function () {\n    ok(false, 'application/route.js should pass jscs.\\ndisallowMultipleLineBreaks: ; and export should have at most 2 line(s) between them at application/route.js :\\n     6 |  inject\\n     7 |  } = Ember;\\n     8 |const { service } = inject;\\n-----------------------------------^\\n     9 |\\n    10 |\\nrequireSpaceBeforeBlockStatements: One (or more) spaces required before opening brace for block expressions at application/route.js :\\n    13 |  currentUser: service(),\\n    14 |\\n    15 |  beforeModel(){\\n-----------------------^\\n    16 |    this._super(...arguments);\\n    17 |    if (this.get(\\'session.session.isAuthenticated\\')) {\\nrequireSpacesInFunction: Missing space before opening curly brace at application/route.js :\\n    13 |  currentUser: service(),\\n    14 |\\n    15 |  beforeModel(){\\n-----------------------^\\n    16 |    this._super(...arguments);\\n    17 |    if (this.get(\\'session.session.isAuthenticated\\')) {\\ndisallowMultipleLineBreaks: , and _populateCurrentUser should have at most 2 line(s) between them at application/route.js :\\n    24 |      this._populateCurrentUser();\\n    25 |    }\\n    26 |  }),\\n-------------^\\n    27 |\\n    28 |\\nrequireSpaceBeforeBlockStatements: One (or more) spaces required before opening brace for block expressions at application/route.js :\\n    27 |\\n    28 |\\n    29 |  _populateCurrentUser(){\\n--------------------------------^\\n    30 |    console.log(\\'_populateCurrentUser\\');\\n    31 |    let authenticator = this.container.lookup(\\'authenticator:jwt\\');\\nrequireSpacesInFunction: Missing space before opening curly brace at application/route.js :\\n    27 |\\n    28 |\\n    29 |  _populateCurrentUser(){\\n--------------------------------^\\n    30 |    console.log(\\'_populateCurrentUser\\');\\n    31 |    let authenticator = this.container.lookup(\\'authenticator:jwt\\');');\n  });\n});","define('nodde-client/tests/application/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - application');\n  QUnit.test('application/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/route.js should pass jshint.');\n  });\n});","define('nodde-client/tests/components/default-toolbar/component.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - components/default-toolbar');\n  test('components/default-toolbar/component.js should pass jscs', function () {\n    ok(true, 'components/default-toolbar/component.js should pass jscs.');\n  });\n});","define('nodde-client/tests/components/default-toolbar/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/default-toolbar');\n  QUnit.test('components/default-toolbar/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/default-toolbar/component.js should pass jshint.');\n  });\n});","define('nodde-client/tests/components/line-edit/component.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - components/line-edit');\n  test('components/line-edit/component.js should pass jscs', function () {\n    ok(false, 'components/line-edit/component.js should pass jscs.\\nvalidateIndentation: Expected indentation of 8 characters at components/line-edit/component.js :\\n    42 |          break;\\n    43 |        default:\\n    44 |          // do nothing\\n----------------^\\n    45 |      }\\n    46 |    },');\n  });\n});","define('nodde-client/tests/components/line-edit/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/line-edit');\n  QUnit.test('components/line-edit/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/line-edit/component.js should pass jshint.');\n  });\n});","define('nodde-client/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('nodde-client/tests/helpers/destroy-app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/destroy-app.js should pass jscs', function () {\n    ok(true, 'helpers/destroy-app.js should pass jscs.');\n  });\n});","define('nodde-client/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('nodde-client/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('nodde-client/tests/helpers/ember-sortable/test-helpers', ['exports', 'ember-sortable/helpers/drag', 'ember-sortable/helpers/reorder'], function (exports, _emberSortableHelpersDrag, _emberSortableHelpersReorder) {});","define('nodde-client/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'nodde-client/tests/helpers/start-app', 'nodde-client/tests/helpers/destroy-app'], function (exports, _qunit, _noddeClientTestsHelpersStartApp, _noddeClientTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _noddeClientTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _noddeClientTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('nodde-client/tests/helpers/module-for-acceptance.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/module-for-acceptance.js should pass jscs', function () {\n    ok(false, 'helpers/module-for-acceptance.js should pass jscs.\\nrequireSpread: Illegal use of apply method. Use the spread operator instead at helpers/module-for-acceptance.js :\\n     9 |\\n    10 |      if (options.beforeEach) {\\n    11 |        options.beforeEach.apply(this, arguments);\\n-----------------------------------^\\n    12 |      }\\n    13 |    },\\nrequireSpread: Illegal use of apply method. Use the spread operator instead at helpers/module-for-acceptance.js :\\n    17 |\\n    18 |      if (options.afterEach) {\\n    19 |        options.afterEach.apply(this, arguments);\\n----------------------------------^\\n    20 |      }\\n    21 |    }');\n  });\n});","define('nodde-client/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('nodde-client/tests/helpers/resolver', ['exports', 'nodde-client/resolver', 'nodde-client/config/environment'], function (exports, _noddeClientResolver, _noddeClientConfigEnvironment) {\n\n  var resolver = _noddeClientResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _noddeClientConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _noddeClientConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('nodde-client/tests/helpers/resolver.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/resolver.js should pass jscs', function () {\n    ok(true, 'helpers/resolver.js should pass jscs.');\n  });\n});","define('nodde-client/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('nodde-client/tests/helpers/start-app', ['exports', 'ember', 'nodde-client/app', 'nodde-client/config/environment'], function (exports, _ember, _noddeClientApp, _noddeClientConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _noddeClientConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _noddeClientApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('nodde-client/tests/helpers/start-app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/start-app.js should pass jscs', function () {\n    ok(true, 'helpers/start-app.js should pass jscs.');\n  });\n});","define('nodde-client/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('nodde-client/tests/integration/components/answer-question/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('answer-question', 'Integration | Component | answer question', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'answer-question', ['loc', [null, [1, 0], [1, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'answer-question', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('nodde-client/tests/integration/components/answer-question/component-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/answer-question');\n  test('integration/components/answer-question/component-test.js should pass jscs', function () {\n    ok(true, 'integration/components/answer-question/component-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/integration/components/answer-question/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/answer-question');\n  QUnit.test('integration/components/answer-question/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/answer-question/component-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/integration/components/default-toolbar/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('default-toolbar', 'Integration | Component | default toolbar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'default-toolbar', ['loc', [null, [1, 0], [1, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'default-toolbar', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('nodde-client/tests/integration/components/default-toolbar/component-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/default-toolbar');\n  test('integration/components/default-toolbar/component-test.js should pass jscs', function () {\n    ok(true, 'integration/components/default-toolbar/component-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/integration/components/default-toolbar/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/default-toolbar');\n  QUnit.test('integration/components/default-toolbar/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/default-toolbar/component-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/integration/components/line-edit/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('line-edit', 'Integration | Component | line edit', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 13\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'line-edit', ['loc', [null, [1, 0], [1, 13]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'line-edit', [], [], 0, null, ['loc', [null, [2, 4], [4, 18]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('nodde-client/tests/integration/components/line-edit/component-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/line-edit');\n  test('integration/components/line-edit/component-test.js should pass jscs', function () {\n    ok(true, 'integration/components/line-edit/component-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/integration/components/line-edit/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/line-edit');\n  QUnit.test('integration/components/line-edit/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/line-edit/component-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/integration/components/pool-in-list/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('pool-in-list', 'Integration | Component | pool in list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\"\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 16\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'pool-in-list', ['loc', [null, [1, 0], [1, 16]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\"\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.3.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.3.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'pool-in-list', [], [], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('nodde-client/tests/integration/components/pool-in-list/component-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/pool-in-list');\n  test('integration/components/pool-in-list/component-test.js should pass jscs', function () {\n    ok(true, 'integration/components/pool-in-list/component-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/integration/components/pool-in-list/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/pool-in-list');\n  QUnit.test('integration/components/pool-in-list/component-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pool-in-list/component-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/login/controller.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - login');\n  test('login/controller.js should pass jscs', function () {\n    ok(true, 'login/controller.js should pass jscs.');\n  });\n});","define('nodde-client/tests/login/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - login');\n  QUnit.test('login/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'login/controller.js should pass jshint.');\n  });\n});","define('nodde-client/tests/login/route.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - login');\n  test('login/route.js should pass jscs', function () {\n    ok(true, 'login/route.js should pass jscs.');\n  });\n});","define('nodde-client/tests/login/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - login');\n  QUnit.test('login/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'login/route.js should pass jshint.');\n  });\n});","define('nodde-client/tests/models/pool.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/pool.js should pass jscs', function () {\n    ok(true, 'models/pool.js should pass jscs.');\n  });\n});","define('nodde-client/tests/models/pool.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/pool.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/pool.js should pass jshint.');\n  });\n});","define('nodde-client/tests/models/user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/user.js should pass jscs', function () {\n    ok(true, 'models/user.js should pass jscs.');\n  });\n});","define('nodde-client/tests/models/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/user.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass jshint.');\n  });\n});","define('nodde-client/tests/new-pool/controller.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - new-pool');\n  test('new-pool/controller.js should pass jscs', function () {\n    ok(true, 'new-pool/controller.js should pass jscs.');\n  });\n});","define('nodde-client/tests/new-pool/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - new-pool');\n  QUnit.test('new-pool/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'new-pool/controller.js should pass jshint.');\n  });\n});","define('nodde-client/tests/new-pool/route.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - new-pool');\n  test('new-pool/route.js should pass jscs', function () {\n    ok(false, 'new-pool/route.js should pass jscs.\\ndisallowSpacesInsideParentheses: Illegal space after opening round bracket at new-pool/route.js :\\n    11 |    let userPromise = this.get(\\'currentUser.user\\');\\n    12 |    console.log(\\'user -> \\', userPromise);\\n    13 |    return userPromise.then( (user) => {\\n------------------------------------^\\n    14 |      return this.store.createRecord(\\'pool\\', {\\n    15 |        title: \\'Pick a title\\',');\n  });\n});","define('nodde-client/tests/new-pool/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - new-pool');\n  QUnit.test('new-pool/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'new-pool/route.js should pass jshint.');\n  });\n});","define('nodde-client/tests/resolver.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('resolver.js should pass jscs', function () {\n    ok(true, 'resolver.js should pass jscs.');\n  });\n});","define('nodde-client/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('nodde-client/tests/results/route.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - results');\n  test('results/route.js should pass jscs', function () {\n    ok(true, 'results/route.js should pass jscs.');\n  });\n});","define('nodde-client/tests/results/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - results');\n  QUnit.test('results/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'results/route.js should pass jshint.');\n  });\n});","define('nodde-client/tests/router.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('router.js should pass jscs', function () {\n    ok(true, 'router.js should pass jscs.');\n  });\n});","define('nodde-client/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('nodde-client/tests/services/current-user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - services');\n  test('services/current-user.js should pass jscs', function () {\n    ok(true, 'services/current-user.js should pass jscs.');\n  });\n});","define('nodde-client/tests/services/current-user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services');\n  QUnit.test('services/current-user.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/current-user.js should pass jshint.');\n  });\n});","define('nodde-client/tests/sign-up/controller.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - sign-up');\n  test('sign-up/controller.js should pass jscs', function () {\n    ok(true, 'sign-up/controller.js should pass jscs.');\n  });\n});","define('nodde-client/tests/sign-up/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - sign-up');\n  QUnit.test('sign-up/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sign-up/controller.js should pass jshint.');\n  });\n});","define('nodde-client/tests/sign-up/route.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - sign-up');\n  test('sign-up/route.js should pass jscs', function () {\n    ok(true, 'sign-up/route.js should pass jscs.');\n  });\n});","define('nodde-client/tests/sign-up/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - sign-up');\n  QUnit.test('sign-up/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sign-up/route.js should pass jshint.');\n  });\n});","define('nodde-client/tests/test-helper', ['exports', 'nodde-client/tests/helpers/resolver', 'ember-qunit'], function (exports, _noddeClientTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_noddeClientTestsHelpersResolver['default']);\n});","define('nodde-client/tests/test-helper.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('test-helper.js should pass jscs', function () {\n    ok(true, 'test-helper.js should pass jscs.');\n  });\n});","define('nodde-client/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/answer/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:answer', 'Unit | Controller | answer', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('nodde-client/tests/unit/answer/controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/answer');\n  test('unit/answer/controller-test.js should pass jscs', function () {\n    ok(true, 'unit/answer/controller-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/answer/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/answer');\n  QUnit.test('unit/answer/controller-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/answer/controller-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/answer/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:answer', 'Unit | Route | answer', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('nodde-client/tests/unit/answer/route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/answer');\n  test('unit/answer/route-test.js should pass jscs', function () {\n    ok(true, 'unit/answer/route-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/answer/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/answer');\n  QUnit.test('unit/answer/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/answer/route-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/application/adapter-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('nodde-client/tests/unit/application/adapter-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/application');\n  test('unit/application/adapter-test.js should pass jscs', function () {\n    ok(true, 'unit/application/adapter-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/application/adapter-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/application');\n  QUnit.test('unit/application/adapter-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/adapter-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/login/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('nodde-client/tests/unit/login/controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/login');\n  test('unit/login/controller-test.js should pass jscs', function () {\n    ok(true, 'unit/login/controller-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/login/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/login');\n  QUnit.test('unit/login/controller-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/login/controller-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/login/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('nodde-client/tests/unit/login/route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/login');\n  test('unit/login/route-test.js should pass jscs', function () {\n    ok(true, 'unit/login/route-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/login/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/login');\n  QUnit.test('unit/login/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/login/route-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/models/pool-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('pool', 'Unit | Model | pool', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('nodde-client/tests/unit/models/pool-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/pool-test.js should pass jscs', function () {\n    ok(true, 'unit/models/pool-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/models/pool-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/pool-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/pool-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('nodde-client/tests/unit/models/user-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/user-test.js should pass jscs', function () {\n    ok(true, 'unit/models/user-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/models/user-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/user-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/new-pool/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:new-pool', 'Unit | Controller | new pool', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('nodde-client/tests/unit/new-pool/controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/new-pool');\n  test('unit/new-pool/controller-test.js should pass jscs', function () {\n    ok(true, 'unit/new-pool/controller-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/new-pool/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/new-pool');\n  QUnit.test('unit/new-pool/controller-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/new-pool/controller-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/new-pool/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:new-pool', 'Unit | Route | new pool', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('nodde-client/tests/unit/new-pool/route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/new-pool');\n  test('unit/new-pool/route-test.js should pass jscs', function () {\n    ok(true, 'unit/new-pool/route-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/new-pool/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/new-pool');\n  QUnit.test('unit/new-pool/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/new-pool/route-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/results/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:results', 'Unit | Route | results', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('nodde-client/tests/unit/results/route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/results');\n  test('unit/results/route-test.js should pass jscs', function () {\n    ok(true, 'unit/results/route-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/results/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/results');\n  QUnit.test('unit/results/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/results/route-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/services/current-user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:current-user', 'Unit | Service | current user', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('nodde-client/tests/unit/services/current-user-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/services');\n  test('unit/services/current-user-test.js should pass jscs', function () {\n    ok(true, 'unit/services/current-user-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/services/current-user-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services');\n  QUnit.test('unit/services/current-user-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/current-user-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/sign-up/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:sign-up', 'Unit | Controller | sign up', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('nodde-client/tests/unit/sign-up/controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/sign-up');\n  test('unit/sign-up/controller-test.js should pass jscs', function () {\n    ok(true, 'unit/sign-up/controller-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/sign-up/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/sign-up');\n  QUnit.test('unit/sign-up/controller-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/sign-up/controller-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/sign-up/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:sign-up', 'Unit | Route | sign-up', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('nodde-client/tests/unit/sign-up/route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/sign-up');\n  test('unit/sign-up/route-test.js should pass jscs', function () {\n    ok(true, 'unit/sign-up/route-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/sign-up/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/sign-up');\n  QUnit.test('unit/sign-up/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/sign-up/route-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/welcome/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:welcome', 'Unit | Controller | welcome', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('nodde-client/tests/unit/welcome/controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/welcome');\n  test('unit/welcome/controller-test.js should pass jscs', function () {\n    ok(true, 'unit/welcome/controller-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/welcome/controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/welcome');\n  QUnit.test('unit/welcome/controller-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/welcome/controller-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/unit/welcome/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:welcome', 'Unit | Route | welcome', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('nodde-client/tests/unit/welcome/route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/welcome');\n  test('unit/welcome/route-test.js should pass jscs', function () {\n    ok(true, 'unit/welcome/route-test.js should pass jscs.');\n  });\n});","define('nodde-client/tests/unit/welcome/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/welcome');\n  QUnit.test('unit/welcome/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/welcome/route-test.js should pass jshint.');\n  });\n});","define('nodde-client/tests/welcome/controller.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - welcome');\n  test('welcome/controller.js should pass jscs', function () {\n    ok(true, 'welcome/controller.js should pass jscs.');\n  });\n});","define('nodde-client/tests/welcome/controller.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - welcome');\n  QUnit.test('welcome/controller.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'welcome/controller.js should pass jshint.');\n  });\n});","define('nodde-client/tests/welcome/pool-in-list/component.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - welcome/pool-in-list');\n  test('welcome/pool-in-list/component.js should pass jscs', function () {\n    ok(true, 'welcome/pool-in-list/component.js should pass jscs.');\n  });\n});","define('nodde-client/tests/welcome/pool-in-list/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - welcome/pool-in-list');\n  QUnit.test('welcome/pool-in-list/component.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'welcome/pool-in-list/component.js should pass jshint.');\n  });\n});","define('nodde-client/tests/welcome/route.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - welcome');\n  test('welcome/route.js should pass jscs', function () {\n    ok(true, 'welcome/route.js should pass jscs.');\n  });\n});","define('nodde-client/tests/welcome/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - welcome');\n  QUnit.test('welcome/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'welcome/route.js should pass jshint.\\nwelcome/route.js: line 11, col 14, \\'Promise\\' is not defined.\\n\\n1 error');\n  });\n});","/* jshint ignore:start */\n\nrequire('nodde-client/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}